#include <stdio.h>
#include "pico/stdlib.h"
#include "yama_2_GFX.h"

#define MOSI 19
#define SCK  18
#define CS   17
#define MISO 16

#define RST  22
#define DC   20

#define SPI_PORT  spi0

yama_2_GFX_ILI9341 tft = yama_2_GFX_ILI9341(SPI_PORT, DC, RST, CS);


extern const uint8_t bitmap01[];
extern const uint8_t bitmap_mask01[];

#define WIDTH    320
#define HEIGHT   240
#define RASPBERRY_N  40
#define RDX        5
#define RDY        5

void random_raspberry(void);
void setup();
void loop();
int main() {
    stdio_init_all();

    spi_init(SPI_PORT, 40000000);
    gpio_set_function(MISO, GPIO_FUNC_SPI);
    gpio_set_function(SCK, GPIO_FUNC_SPI);
    gpio_set_function(MOSI, GPIO_FUNC_SPI);
    gpio_pull_up(MISO);
    gpio_pull_up(SCK);
    gpio_pull_up(MOSI);
    spi_set_format(SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);   // SPI MODE0, MSBFIRST

    sleep_ms(100); 
    printf("\nReset:");


    tft.tft_setup();
    tft.setRotation(3);
    tft.fillScreen(ILI9341_BLACK);

    setup();
    while (1) {
        loop();
    }

    return 0;
}

void loop() {
    random_raspberry();
}

int rnd(int max);

struct {
    int    x;
    int    y;
    int    dx;
    int    dy;
    int    signx;
    int    signy;
    int    c;
} raspberry_data01[RASPBERRY_N];

GFXcanvas16 canvas01 = GFXcanvas16(WIDTH, HEIGHT);

void setup(void){
    for (int i = 0; i < RASPBERRY_N; i++) {
        raspberry_data01[i].x = rnd(WIDTH);
        raspberry_data01[i].y = rnd(HEIGHT);
        raspberry_data01[i].dx = rnd(RDX) + 1;
        raspberry_data01[i].dy = rnd(RDY) + 1;
        raspberry_data01[i].signx = rnd(2) ? 1 : -1;
        raspberry_data01[i].signy = rnd(2) ? 1 : -1;
    }
}

void random_raspberry(void) {

    int temp1, temp2;
    canvas01.fillScreen(ILI9341_BLACK);
    for (int i = 0; i < RASPBERRY_N; i++ ) {
        temp1 = raspberry_data01[i].dx * raspberry_data01[i].signx;
        temp2 = raspberry_data01[i].x + temp1;
        if (temp2 > WIDTH) {
            raspberry_data01[i].signx = -1;
            raspberry_data01[i].dx = rnd(RDX) + 1;
            raspberry_data01[i].x = WIDTH + raspberry_data01[i].signx * raspberry_data01[i].dx;
        } else if (temp2 < 0 ) {
            raspberry_data01[i].signx = 1;
            raspberry_data01[i].dx = rnd(RDX) + 1;
            raspberry_data01[i].x = 0 + raspberry_data01[i].signx * raspberry_data01[i].dx;
        } else {
            raspberry_data01[i].x = raspberry_data01[i].x + temp1;
        } 
        temp1 = raspberry_data01[i].dy * raspberry_data01[i].signy;
        temp2 = raspberry_data01[i].y + temp1;
        if (temp2 > HEIGHT) {
            raspberry_data01[i].signy = -1;
            raspberry_data01[i].dy = rnd(RDY) + 1;
            raspberry_data01[i].y = HEIGHT + raspberry_data01[i].signy * raspberry_data01[i].dy;
        } else if (temp2 < 0 ) {
            raspberry_data01[i].signy = 1;
            raspberry_data01[i].dy = rnd(RDY) + 1;
            raspberry_data01[i].y = 0 + raspberry_data01[i].signy * raspberry_data01[i].dy;
        } else {
            raspberry_data01[i].y = raspberry_data01[i].y + temp1;
        } 
        canvas01.drawRGBBitmap( raspberry_data01[i].x, raspberry_data01[i].y, (const uint16_t *)bitmap01, (const uint8_t *)bitmap_mask01, 32, 32);
    }
    tft.drawRGBBitmap(0, 0, canvas01.getBuffer(), WIDTH, HEIGHT); 
    sleep_ms(10);
}

int rnd(int a) {
    return (rand() % a);
}

const uint8_t bitmap_mask01[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x7c,0x3e,0x00,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,0x03,0xff,0xff,0xc0,
0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,
0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,
0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,
0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,
0x01,0xff,0xff,0x80,0x00,0xff,0xff,0x00,0x00,0x7f,0xfe,0x00,0x00,0x3f,0xfc,0x00,
0x00,0x0f,0xf0,0x00,0x00,0x03,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const uint8_t bitmap01[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xbe,0xf7,0x5d,0xef,0x5d,0xef,0x9e,0xf7,0xdf,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xdf,0xff,0x9e,0xf7,0x5d,0xef,0x5d,0xef,0xbf,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0xde,
0x71,0x8c,0xca,0x52,0x67,0x42,0xc7,0x42,0xc8,0x4a,0x0b,0x5b,0x14,0xa5,0xbe,0xf7,
0xbe,0xf7,0x14,0xa5,0x0b,0x5b,0xc8,0x4a,0xc7,0x42,0x67,0x42,0xea,0x5a,0x92,0x94,
0xfb,0xde,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x6d,0x6b,
0x63,0x2a,0x86,0x4c,0x27,0x5d,0x88,0x65,0x07,0x5d,0x26,0x4c,0x23,0x2a,0xb2,0x94,
0x92,0x94,0x43,0x2a,0x26,0x4c,0x07,0x5d,0x88,0x65,0x27,0x5d,0x86,0x54,0x63,0x2a,
0x8d,0x6b,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xff,0xaa,0x52,
0x46,0x4c,0x29,0x6e,0x88,0x65,0x48,0x5d,0xe9,0x6d,0x29,0x6e,0x47,0x5d,0xe5,0x29,
0xe5,0x29,0x48,0x5d,0x29,0x6e,0xe9,0x6d,0x48,0x5d,0x88,0x65,0x29,0x6e,0x26,0x4c,
0xaa,0x52,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8e,0x73,
0xc3,0x2a,0xe9,0x6d,0xe9,0x6d,0x07,0x5d,0x46,0x4c,0x27,0x5d,0x09,0x6e,0x23,0x22,
0x23,0x22,0x09,0x6e,0x28,0x5d,0x46,0x4c,0x07,0x5d,0xe9,0x6d,0xe9,0x6d,0xa3,0x2a,
0x8e,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x18,0xc6,
0x64,0x21,0x86,0x54,0x09,0x6e,0x09,0x6e,0x88,0x65,0xe6,0x43,0x45,0x3b,0xa1,0x08,
0xa1,0x08,0x25,0x3b,0x06,0x4c,0x88,0x65,0x09,0x6e,0x09,0x6e,0x86,0x54,0x64,0x21,
0x18,0xc6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0x51,0x8c,0xc3,0x21,0xe7,0x5c,0x09,0x6e,0x29,0x6e,0x07,0x5d,0xc1,0x08,0x00,0x00,
0x00,0x00,0xc1,0x08,0x07,0x5d,0x29,0x6e,0x09,0x6e,0xe7,0x5c,0xc3,0x21,0x72,0x8c,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xdf,0xff,0x92,0x94,0x83,0x21,0xe4,0x32,0xc4,0x32,0x42,0x11,0x00,0x08,0x22,0x28,
0x22,0x28,0x00,0x08,0x42,0x11,0xc4,0x32,0xe4,0x32,0x83,0x21,0x92,0x94,0xdf,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0x9e,0xf7,0xae,0x7b,0x84,0x40,0x65,0x70,0x44,0x60,0x22,0x30,0x86,0x88,0xc8,0xb8,
0xc8,0xb8,0x86,0x90,0x22,0x30,0x44,0x60,0x65,0x70,0x83,0x40,0xae,0x7b,0x9e,0xf7,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0x92,0x94,0x43,0x48,0xc8,0xb8,0xc9,0xc0,0x43,0x50,0x43,0x48,0xc9,0xc0,0xc9,0xc8,
0xc9,0xc8,0xc9,0xc8,0x64,0x58,0x43,0x50,0xc9,0xc0,0xc8,0xb8,0x43,0x40,0xb2,0x94,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xff,
0x69,0x52,0x66,0x80,0xa8,0xa8,0x43,0x40,0x00,0x10,0x21,0x18,0x43,0x48,0x65,0x70,
0x85,0x70,0x64,0x58,0x21,0x20,0x00,0x10,0x43,0x48,0xa8,0xb0,0x66,0x80,0x69,0x52,
0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x5d,0xef,
0x86,0x31,0x43,0x48,0x22,0x28,0x44,0x50,0xa7,0xa0,0xa7,0xa0,0x44,0x50,0x00,0x00,
0x00,0x00,0x64,0x50,0xa7,0xa0,0xa7,0xa0,0x43,0x50,0x22,0x30,0x43,0x48,0x86,0x31,
0x5d,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbe,0xf7,0x8e,0x73,
0x63,0x38,0x01,0x10,0x43,0x48,0xc9,0xc0,0xc9,0xc8,0xc9,0xc8,0xc8,0xb0,0x21,0x20,
0x21,0x20,0xc8,0xb0,0xc9,0xc8,0xc9,0xc8,0xc9,0xb8,0x43,0x40,0x01,0x10,0x63,0x38,
0x8e,0x73,0xbe,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0x9c,0x64,0x48,
0xc8,0xb8,0x43,0x50,0x86,0x80,0xc9,0xc8,0xc9,0xc0,0xc9,0xc0,0xc9,0xb8,0x22,0x28,
0x22,0x28,0xc9,0xb8,0xc9,0xc0,0xc9,0xc0,0xc9,0xc8,0x86,0x80,0x43,0x50,0xc8,0xb8,
0x63,0x48,0x14,0xa5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcb,0x5a,0x65,0x80,
0xc9,0xc8,0x43,0x48,0x86,0x88,0xc9,0xc8,0xc9,0xc0,0xc9,0xc0,0xa8,0xb0,0x21,0x18,
0x21,0x18,0xa8,0xb0,0xc9,0xc0,0xc9,0xc0,0xc9,0xc8,0x86,0x88,0x43,0x48,0xc9,0xc8,
0x65,0x80,0xcb,0x5a,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0x5a,0x65,0x78,
0xc8,0xb8,0x22,0x28,0x43,0x50,0xc9,0xb8,0xc9,0xc0,0xc8,0xb8,0x64,0x58,0x00,0x08,
0x00,0x10,0x64,0x60,0xc8,0xb8,0xc9,0xc0,0xc8,0xb8,0x43,0x50,0x22,0x28,0xc8,0xb8,
0x65,0x78,0xcb,0x5a,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x71,0x8c,0x43,0x48,
0x86,0x90,0x00,0x08,0x00,0x00,0x42,0x38,0x43,0x50,0x43,0x40,0x64,0x68,0xa7,0xa0,
0xa7,0xa0,0x85,0x78,0x43,0x48,0x43,0x50,0x22,0x38,0x00,0x00,0x00,0x08,0x86,0x88,
0x43,0x48,0xb2,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3c,0xe7,0xc7,0x39,
0x01,0x28,0x65,0x68,0x64,0x58,0x00,0x08,0x00,0x00,0x64,0x58,0xc9,0xc0,0xc9,0xc8,
0xc9,0xc0,0xc9,0xc8,0x65,0x68,0x00,0x00,0x00,0x10,0x64,0x58,0x65,0x68,0x01,0x28,
0xc7,0x39,0x3c,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8d,0x6b,
0x01,0x28,0xc9,0xc0,0xc9,0xc0,0x85,0x70,0x00,0x08,0x86,0x88,0xc9,0xc8,0xc9,0xc0,
0xc9,0xc0,0xc9,0xc8,0xa7,0x90,0x00,0x08,0x85,0x78,0xc9,0xc0,0xc9,0xc0,0x01,0x28,
0xce,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x75,0xad,
0x42,0x28,0xa8,0xb0,0xc9,0xc0,0xc9,0xc0,0x43,0x38,0x65,0x68,0xc9,0xc8,0xc9,0xc0,
0xc9,0xc0,0xc9,0xc8,0x85,0x70,0x43,0x40,0xc9,0xc0,0xc9,0xc0,0xa8,0xb0,0x42,0x28,
0x96,0xad,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7d,0xef,
0xc7,0x39,0x65,0x70,0xc9,0xc8,0xc9,0xc8,0x65,0x68,0x21,0x18,0x86,0x88,0xc8,0xb8,
0xc8,0xb8,0x86,0x88,0x21,0x18,0x65,0x70,0xc9,0xc8,0xc9,0xc8,0x65,0x70,0xe7,0x41,
0x7d,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xb6,0xb5,0xe4,0x30,0x65,0x78,0xa8,0xa8,0x64,0x58,0x00,0x00,0x00,0x10,0x42,0x38,
0x43,0x40,0x01,0x10,0x00,0x00,0x64,0x60,0xa8,0xa8,0x65,0x70,0xe4,0x28,0xd7,0xb5,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0x18,0xc6,0x8a,0x52,0x21,0x18,0x00,0x00,0x42,0x38,0x86,0x88,0xa7,0xa0,
0xa8,0xa8,0xa7,0x98,0x43,0x50,0x00,0x00,0x21,0x18,0x8a,0x52,0x18,0xc6,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x7d,0xef,0x34,0xa5,0x49,0x4a,0x63,0x48,0xa8,0xb0,0xc9,0xc8,
0xc9,0xc0,0xa7,0xa8,0x63,0x48,0x69,0x4a,0x34,0xa5,0x7d,0xef,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x9e,0xf7,0x51,0x8c,0x46,0x49,0xa4,0x58,
0x84,0x50,0x46,0x41,0x51,0x8c,0x9e,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1b,0xdf,0x18,0xbe,
0x18,0xbe,0x1b,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};
